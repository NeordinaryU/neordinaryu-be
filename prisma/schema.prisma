// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Region {
  SEOUL
  INCHEON_GYEONGGI
  GYEONGSANG
  CHUNGCHEONG
  JEOLLA
  JEJU
  GANGWON
}

model User {
  id        Int      @id @default(autoincrement())
  userId    String   @unique @map("user_id") @db.VarChar(100)
  password  String   @db.VarChar(100)
  region    Region?
  isOnboarded Boolean  @map("is_onboarded") @default(false)
  createdAt DateTime @default(now()) @map("created_at") @db.DateTime(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.DateTime(6)

  fundings     Funding[]
  userFundings UserFunding[]
  comments     Comment[]
  refreshTokens RefreshToken[]

  @@map("users")
}

model Magazine {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  body      String   @db.VarChar(255)
  photoUrl  String   @db.VarChar(255)
  link      String   @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at") @db.DateTime(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.DateTime(6)

  @@map("megazines")
}

model UserFunding {
  id              Int      @id @default(autoincrement())
  userId          Int      @map("user_id")
  fundingId       Int      @map("funding_id")
  userFundedMoney BigInt   @map("user_funded_money")
  createdAt       DateTime @default(now()) @map("created_at") @db.DateTime(6)
  updatedAt       DateTime @updatedAt @map("updated_at") @db.DateTime(6)

  user    User    @relation(fields: [userId], references: [id])
  funding Funding @relation(fields: [fundingId], references: [id])

  @@map("user_fundings")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.VarChar(100)
  userId    Int      @map("user_id")
  fundingId Int      @map("funding_id")
  createdAt DateTime @default(now()) @map("created_at") @db.DateTime(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.DateTime(6)

  user    User    @relation(fields: [userId], references: [id])
  funding Funding @relation(fields: [fundingId], references: [id])

  @@map("comments")
}

model Funding {
  id               Int      @id @default(autoincrement())
  userId           Int      @map("user_id")
  title            String   @db.VarChar(10)
  description      String   @db.VarChar(300)
  goalMoney        BigInt   @map("goal_money")
  fundedMoney      BigInt   @map("funded_money") // Changed from Int to BigInt
  deadlineDate     DateTime @map("deadline_date") @db.DateTime(6)
  photoUrl         String   @map("photo_url") @db.Text
  region           Region
  detailAddress    String   @map("detail_address") @db.VarChar(30)
  completeDueDate  DateTime @map("complete_due_date") @db.DateTime(6)
  privacyAgreement Boolean  @map("privacy_agreement")
  isProlongation      Boolean  @map("is_prolongation") @default(false)
  status           Boolean  @default(true)
  createdAt        DateTime @default(now()) @map("created_at") @db.DateTime(6)
  updatedAt        DateTime @updatedAt @map("updated_at") @db.DateTime(6)

  user         User          @relation(fields: [userId], references: [id])
  userFundings UserFunding[]
  comments     Comment[]

  @@map("fundings")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique @db.VarChar(512)
  userId    Int      @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}
